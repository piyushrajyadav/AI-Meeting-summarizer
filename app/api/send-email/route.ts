import { type NextRequest, NextResponse } from "next/server"
import nodemailer from "nodemailer"

export async function POST(request: NextRequest) {
  try {
    const { to, subject, summary } = await request.json()

    if (!to || !summary) {
      return NextResponse.json({ error: "Recipient email and summary are required" }, { status: 400 })
    }

    // Check for required environment variables
    if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
      return NextResponse.json(
        {
          error:
            "Email configuration is missing. Please set SMTP_HOST, SMTP_USER, and SMTP_PASS environment variables.",
        },
        { status: 500 },
      )
    }

    // Create transporter
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number.parseInt(process.env.SMTP_PORT || "587"),
      secure: process.env.SMTP_SECURE === "true",
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    })

    // Email content
    const emailHtml = `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="border-bottom: 3px solid #059669; padding-bottom: 20px; margin-bottom: 30px;">
          <h1 style="color: #059669; margin: 0; font-size: 24px;">Meeting Summary</h1>
          <p style="color: #6b7280; margin: 5px 0 0 0;">Generated by AI Meeting Notes Summarizer</p>
        </div>
        
        <div style="background-color: #f8fafc; padding: 20px; border-radius: 8px; border-left: 4px solid #059669;">
          <div style="white-space: pre-wrap; line-height: 1.6; color: #374151;">${summary}</div>
        </div>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;">
          <p style="color: #9ca3af; font-size: 14px; margin: 0;">
            This summary was generated using AI Meeting Notes Summarizer
          </p>
        </div>
      </div>
    `

    const emailText = `Meeting Summary\n\n${summary}\n\n---\nThis summary was generated using AI Meeting Notes Summarizer`

    // Send email
    await transporter.sendMail({
      from: process.env.SMTP_FROM || process.env.SMTP_USER,
      to,
      subject: subject || "Meeting Summary",
      text: emailText,
      html: emailHtml,
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error sending email:", error)
    return NextResponse.json({ error: "Failed to send email" }, { status: 500 })
  }
}
